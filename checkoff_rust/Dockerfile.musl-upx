# arg included so we can copy an SSL certificate needed for Rust build on original developer's machine
ARG BUILD_ENV="copy"

# The seemingly hacky lines below do a conditional copy based on the `BUILD_ENV` build argument. Strategy uses multi-stage builds (inspiration: https://stackoverflow.com/a/54245466)
FROM rust:latest AS build_no_copy
# no-op

FROM rust:latest AS build_copy
COPY certs/ certs/
ONBUILD RUN cat certs/ZscalerRootCertificate-2048-SHA256.pem >> /usr/lib/ssl/certs/ca-certificates.crt

FROM build_${BUILD_ENV} AS build
WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends \
  xz-utils \
  && rm -rf /var/lib/apt/lists/*

RUN wget --no-check-certificate https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz
RUN tar -xf upx-4.2.4-amd64_linux.tar.xz

# Early dependency compilation details: https://medium.com/@dillen.dev/rusty-docker-never-again-fe24e262ab18
RUN cargo init
COPY Cargo.toml Cargo.lock ./
RUN cargo fetch && \
  rustup target add x86_64-unknown-linux-musl && \
  cargo build --release --target=x86_64-unknown-linux-musl && \
  rm src/*.rs

COPY src src

RUN touch src/main.rs && \
  cargo build --release --target=x86_64-unknown-linux-musl

RUN ./upx-4.2.4-amd64_linux/upx -9 -o /app/target/x86_64-unknown-linux-musl/release/checkoff_rust_small /app/target/x86_64-unknown-linux-musl/release/checkoff_rust

from scratch

WORKDIR /app
COPY --from=build /app/target/x86_64-unknown-linux-musl/release/checkoff_rust_small ./
ENV RUST_BACKTRACE=full

CMD ["/app/checkoff_rust_small"]
